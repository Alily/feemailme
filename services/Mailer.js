const sendgrid = require('sendgrid');
const helper = sendgrid.mail;
const keys = require('../config/keys');

class Mailer extends helper.Mail {
  /*
  * @param {Object} survey Any object with 'subject' and 'recipients' properties.
  * @param {String} content The HTML body for email, generated by surveyTemplate.
  */
  constructor({ subject, recipients }, content) {
    // Superclass is sendgrid.mail.Mail
    super();

    // Pass API key to sendgrid function and save result as object
    this.sgApi = sendgrid(keys.sendGridKey);
    this.from_email = new helper.Email('no-reply@atebitbyte.com');
    this.subject = subject;
    this.body = new helper.Content('text/html', content);
    this.recipients = this.formatAddresses(recipients);
    // addContent method is declared in superclass
    this.addContent(this.body);
    this.addClickTracking();
    this.addRecipients();
  }

  /*
  * Extract addresses from subdocument collection
  *
  * @param {Object[]} recipients A bunch of objects with an 'email' property.
  * @return {Object[]} An array of recipients formatted for sendgrid by helper.
  */
  formatAddresses(recipients) {
    return recipients.map(
      ({ email }) => {
        return new helper.Email(email);
      }
    );
  }

  /*
  * Set up sendgrid click tracking.
  */
  addClickTracking() {
    const trackingSettings = new helper.TrackingSettings();
    const clickTracking = new helper.ClickTracking(true, true);

    trackingSettings.setClickTracking(clickTracking);
    this.addTrackingSettings(trackingSettings);
  }

  /*
  * Take and process recipients.
  */
  addRecipients() {
    const personalize = new helper.Personalization();
    // Iterate over the list of sendgrid-formatted recipients created in constructor
    this.recipients.forEach(recipient => {
      // Add each recipient to personalize object
      personalize.addTo(recipient);
    });
    // addPersonalization is defined by Mail base class
    this.addPersonalization(personalize);
  }

  /*
  * Send mailer to sendgrid.
  * (waits on request to be sent to sendgrid API)
  */
  async send() {
    // Create sendgrid API request
    const request = this.sgApi.emptyRequest({
      method: 'POST',
      path: '/v3/mail/send',
      // toJSON is defined by Mail base class
      body: this.toJSON()
    });

    // Send API request to sendgrid and save response using Mail.API.
    const response = await this.sgApi.API(request);
    return response;
  }
}

module.exports = Mailer;
